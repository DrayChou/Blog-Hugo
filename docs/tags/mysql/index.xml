<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql on Dray&#39;s Home</title>
    <link>https://draychou.github.io/Blog-Hugo/tags/mysql/</link>
    <description>Recent content in mysql on Dray&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 15 Apr 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://draychou.github.io/Blog-Hugo/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>原来mysql_insert_id()也不安全啊，不知道有没有其他方法可以用来得到插入的自增ID</title>
      <link>https://draychou.github.io/Blog-Hugo/docs/original-mysql_insert_id-is-not-safe-ah-do-not-know-any-other-ways-to-get-into-the-self-by-id/</link>
      <pubDate>Fri, 15 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://draychou.github.io/Blog-Hugo/docs/original-mysql_insert_id-is-not-safe-ah-do-not-know-any-other-ways-to-get-into-the-self-by-id/</guid>
      <description>今天我负责的一个项目出了问题，插入数据之后调用mysql_insert_id()拿取插入的自增ID的时候一直返回0，试了一下在本地是可以拿到的，但是放到线上就不可以了。
无奈，只好插入完毕之后再通过插入的值来查询一遍得到insert_id。
后来发现，mysql_insert_id() 带上数据量连接ID之后成功率倒是上升了很多，但是高并发下还是有可能会出现得到mysql_insert_id()返回0的现象。
不知道有没有其他方法可以用来得到插入的自增ID。
记。。。</description>
    </item>
    
    <item>
      <title>Mysql 数据库引入 memcached，支持 Nosql</title>
      <link>https://draychou.github.io/Blog-Hugo/docs/mysql-database-into-memcached-support-nosql/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://draychou.github.io/Blog-Hugo/docs/mysql-database-into-memcached-support-nosql/</guid>
      <description>mysql 也开始支持Nosql了，这样一来如果可以直接用sql语句进行检索查询的话无疑会把原先的Memcache等给排挤出去，如果效率方面又很高的话，那么memcache还活什么啊？
嗯。。。期待。。。
Oracle 前天在 2011 Mysql user conference and expo 大会上发布的 Mysql 5.6.2 测试版本，详情请看这里。
该版本最值得关注的便是对 Nosql 技术的支持，尽管目前还是实验阶段，该技术使得 Mysql 内置 Nosql 技术，该技术可减少 memcached 的查询延迟。在单台机器中，Nosql 当前只适用一张 InnoDB 表，但未来将支持多个表。在 memcached 中的 key和value 分别对应表中的相应字段，同时可为 key定义多列的值。所有这些数据都存储在一张 InnoDB 表，可通过 sql 命令来进行检索和修改。目前集成 memcached 守护进程的版本只能用于 linux。
来自 InnoDB 的博客向你介绍如何启用该功能
下图是该技术的架构图：
来自:http://news.cnblogs.com/n/97243/</description>
    </item>
    
    <item>
      <title>记mysql读写分离</title>
      <link>https://draychou.github.io/Blog-Hugo/docs/separation-of-mind-to-read-and-write-mysql/</link>
      <pubDate>Thu, 14 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://draychou.github.io/Blog-Hugo/docs/separation-of-mind-to-read-and-write-mysql/</guid>
      <description>我们公司的网站做项目使用的是自己封装的Mysql查询函数（注意，是函数，不是过程），没有使用框架，使用的模板也是老板自己写的，所以做读写分离是件比较麻烦的事情。
一般来说，读写分离有2中方法：
 1.代码端 在代码段数据库访问部分进行修改，这点如果项目本身采用框架，或者封装了访问过程，又保证没有直接通过mysql_query()函数来进行查询的话是很简单的一个方法，很多框架默认都是直接读写分离的，只要稍微修改一下配置文件即可。 但这样做有几个缺点： - 1.如果数据库服务器做分布式，比如说有2台进行写操作，2台进行读操作，那么读写数据库时的权重是个很麻烦的问题。 - 2.如果需要添加数据库服务器，那么需要修改配置文件和权重分配，又是一个麻烦的事情。 - 3.一旦其中一台数据库挂掉，单纯的改配置显然是应付不了的。 2.数据库访问代理 就是说在数据库和网络之间增加一层访问代理。这层代理是透明的，外界几乎看不出来区别，所以对于程序员来说，几乎不需要做任何事，只要把端口改成代理的端口就可以了，代码什么的，原封不动。 - 而且代理服务器的另一个好处是，权重和负载均衡，就算有一台服务器挂掉了，也不影响数据库访问。 - 另一个优点是，代理支持水平垂直分表分库，只要做好相应的规则，那么外界访问的时候就不需要管数据库的分表问题。比如说，我要查询用户的信息，只需要select * from user where user_id = ?,不需要再先计算用户属于哪个库那个表之类的，方便啊～，但是要做到这个，就需要对以前的代码做大范围的修改，所以这步我们暂且不做。  两个比较有名的开源数据库代理软件：
1.Amoeba_proxy
2.Mysql_proxy
我们用的是第一个，具体原因嘛，很简单，mysql_proxy 已经好几年没维护了。。。</description>
    </item>
    
  </channel>
</rss>